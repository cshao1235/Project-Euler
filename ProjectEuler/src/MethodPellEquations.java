import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class MethodPellEquations {
	public static class Pair
	{
		long x;
		long y;
		public Pair(long x, long y)
		{
			this.x = x;
			this.y = y;
		}
		public long magnitude()
		{
			return (x+2*y)*(x+2*y) + y*y;
		}
		public String toString()
		{
			return x + " " + y;
		}
	}
	//private static final int NUM_SOLUTIONS = 12;
	//finds solutions to negative Pell equation x^2 - ny^2 = -1 and x^2 - ny^2 = 1
	//given minimal solution (minX, minY) and that x^2 - ny^2 = -1 is solvable
	public static ArrayList<Pair> pellSolutionsPositiveAndNegative(int n, int minX, int minY, int numSolutions)
	{
		ArrayList<Pair> solutions = new ArrayList<Pair>();
		solutions.add(new Pair(minX, minY));
		while(solutions.size() < numSolutions)
		{
			Pair p = solutions.get(solutions.size() - 1);
			long x = p.x;
			long y = p.y;
			solutions.add(new Pair(x * minX + n * y * minY, y * minX + x * minY));
		}
		return solutions;
	}
	//finds solutions to x^2 - ny^2 = a generated by (minX, minY)
	//(fMinX, fMinY) is the minimal solution to x^2 - ny^2 = 1
	public static ArrayList<Pair> pellTypeSolutions(int n, int a, int minX, int minY, int fminX, int fminY, int numSolutions)
	{
		ArrayList<Pair> solutions = new ArrayList<Pair>();
		solutions.add(new Pair(minX, minY));
		while(solutions.size() < numSolutions)
		{
			Pair p = solutions.get(solutions.size() - 1);
			long x = p.x;
			long y = p.y;
			solutions.add(new Pair(x * fminX + n * y * fminY, y * fminX + x * fminY));
		}
		return solutions;
	}
	public static ArrayList<Pair> negativePellSolutions(int n, int minX, int minY, long bound)
	{
		ArrayList<Pair> solutions = new ArrayList<Pair>();
		solutions.add(new Pair(minX, minY));
		while(solutions.get(solutions.size() - 1).x < bound)
		{
			Pair p = solutions.get(solutions.size() - 1);
			long x = p.x;
			long y = p.y;
			solutions.add(new Pair(x * minX + n * y * minY, y * minX + x * minY));
		}
		solutions.remove(solutions.size() - 1);
		return solutions;
	}
	
	//finds solutions to Pell equation x^2 - ny^2 = 1 with minimal solution (minX, minY)
	public static ArrayList<Pair> pellSolutions(long n, long minX, long minY, long bound) //generates solutions to Pell equation x^2 - ny^2 = 1;
	{
		ArrayList<Pair> answers = new ArrayList<Pair>();
		answers.add(new Pair(minX, minY));
		while(answers.get(answers.size()-1).magnitude() <= (bound+1)/3)
		{
			Pair p = answers.get(answers.size()-1);
			long x = p.x * minX + n * p.y * minY;
			long y = p.y * minX + p.x * minY;
			answers.add(new Pair(x, y));
		}
		return answers;
	}
	
	public static void main(String[] args)
	{
		try
		{
			BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
			long a = Long.parseLong(f.readLine());
			ArrayList<Pair> solutions = negativePellSolutions(2, 1, 1, 2*a-1);
			long sum = 0;
			for(int i = 0; i < solutions.size(); i++)
			{
				if(i%2 == 0)
				{
					Pair p = solutions.get(i);
					sum += (p.x - 1)/2;
					System.out.println(p.x + " " + p.y);
				}
			}
			System.out.println(sum);
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}
}
